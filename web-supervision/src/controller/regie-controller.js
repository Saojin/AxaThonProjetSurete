'use strict';
var Emergen6Controllers;
(function (Emergen6Controllers) {
    var RegieCtrl = (function () {
        RegieCtrl.$inject = ["$scope", "uiGmapGoogleMapApi", "RegieService", "UserService", "$interval"];
        function RegieCtrl($scope, uiGmapGoogleMapApi, RegieService, UserService, $interval) {
            'ngInject';
            var _this = this;
            this.$scope = $scope;
            this.RegieService = RegieService;
            this.UserService = UserService;
            this.fk = {};
            this.isLoading = true;
            uiGmapGoogleMapApi.then(function (maps) {
                if (typeof _.contains === 'undefined') {
                    _.contains = _.includes;
                }
                if (typeof _.object === 'undefined') {
                    _.object = _.zipObject;
                }
                maps.visualRefresh = true;
                RegieService.getPositions().then(function (response) {
                    _this.fk.data1 = Math.ceil(Math.random() * 234);
                    _this.fk.data2 = Math.ceil(Math.random() * 932);
                    _this.fk.data3 = Math.ceil(Math.random() * 534);
                    _this.fk.data4 = Math.ceil(Math.random() * 16);
                    _this.isLoading = false;
                    response.data.forEach(function (signalement) {
                        if (!signalement.hasMeta)
                            signalement.icon = 'src/img/no-info.png';
                        else
                            signalement.icon = 'src/img/info.png';
                        signalement.click = function () {
                            if (!!signalement.hasMeta)
                                _this.showDetails(signalement);
                            else
                                _this.currentPoint = null;
                        };
                        _this.map.pointList.push(signalement);
                    });
                    $interval(function () {
                        _this.fk.data1 = Math.ceil(Math.random() * 234);
                    }, 1000 + Math.random() * 2500);
                    $interval(function () {
                        _this.fk.data2 = Math.ceil(Math.random() * 932);
                    }, 1000 + Math.random() * 2500);
                    $interval(function () {
                        _this.fk.data3 = Math.ceil(Math.random() * 534);
                    }, 1000 + Math.random() * 2500);
                    $interval(function () {
                        _this.fk.data4 = Math.ceil(Math.random() * 16);
                    }, 1000 + Math.random() * 2500);
                });
            });
            this.map = { center: { latitude: 48.8965812, longitude: 2.318375999999944 }, zoom: 13, pointList: [], options: { streetViewControl: false } };
            RegieService.socket.on('nouveau-signalement', function (signalement) {
                signalement.options = { animation: 2 };
                if (!signalement.hasMeta)
                    signalement.icon = 'src/img/no-info.png';
                else
                    signalement.icon = 'src/img/info.png';
                signalement.click = function () {
                    if (!!signalement.hasMeta)
                        _this.showDetails(signalement);
                    else
                        _this.currentPoint = null;
                };
                _this.map.pointList.push(signalement);
                _this.$scope.$apply();
            });
        }
        RegieCtrl.prototype.showDetails = function (point) {
            var _this = this;
            this.isLoading = true;
            this.currentPoint = null;
            this.RegieService.resource().get({ id: point.id }).$promise.then(function (data) {
                _this.UserService.get({ id: data.userid }).$promise.then(function (userData) {
                    data.utilisateur = userData;
                    _this.currentPoint = data;
                    _this.isLoading = false;
                    console.log(_this.currentPoint);
                }, function () {
                    _this.currentPoint = data;
                    _this.isLoading = false;
                });
            });
            this.$scope.$apply();
        };
        return RegieCtrl;
    }());
    Emergen6Controllers.RegieCtrl = RegieCtrl;
})(Emergen6Controllers || (Emergen6Controllers = {}));

//# sourceMappingURL=data:application/json;base64,
